generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  password           String?
  twoFactorEnabled   Boolean              @default(false)
  twoFactorMethod    TwoFactorMethod?
  twoFactorSecret    String?
  accounts           Account[]
  sessions           Session[]
  teamMemberships    TeamMember[]
  PasswordResetToken PasswordResetToken[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token   String   @unique
  expires DateTime
}

model Team {
  id      String       @id @default(cuid())
  name    String
  members TeamMember[]
  invites TeamInvite[]
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   Role
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model TeamInvite {
  id      String   @id @default(cuid())
  email   String
  teamId  String
  role    Role
  expires DateTime
  team    Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([email, teamId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum TwoFactorMethod {
  EMAIL
  AUTHENTICATOR
}
